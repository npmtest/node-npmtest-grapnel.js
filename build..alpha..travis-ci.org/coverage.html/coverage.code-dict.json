{"/home/travis/build/npmtest/node-npmtest-grapnel.js/test.js":"/* istanbul instrument in package npmtest_grapnel_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grapnel.js/lib.npmtest_grapnel.js.js":"/* istanbul instrument in package npmtest_grapnel_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grapnel_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grapnel_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grapnel.js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grapnel.js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grapnel_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grapnel_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grapnel_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grapnel_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grapnel_js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grapnel_js.__dirname + '/lib.npmtest_grapnel_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grapnel.js/node_modules/grapnel.js/src/grapnel.js":"/****\n * Grapnel\n * https://github.com/baseprime/grapnel\n *\n * @author Greg Sabia Tucker <greg@narrowlabs.com>\n * @link http://basepri.me\n * @version 0.6.4\n *\n * Released under MIT License. See LICENSE.txt or http://opensource.org/licenses/MIT\n*/\n\n!(function(root) {\n\n    function Grapnel(opts) {\n        \"use strict\";\n\n        var self = this; // Scope reference\n        this.events = {}; // Event Listeners\n        this.state = null; // Router state object\n        this.options = opts || {}; // Options\n        this.options.env = this.options.env || (!!(Object.keys(root).length === 0 && process && process.browser !== true) ? 'server' : 'client');\n        this.options.mode = this.options.mode || (!!(this.options.env !== 'server' && this.options.pushState && root.history && root.history.pushState) ? 'pushState' : 'hashchange');\n        this.version = '0.6.4'; // Version\n\n        if ('function' === typeof root.addEventListener) {\n            root.addEventListener('hashchange', function() {\n                self.trigger('hashchange');\n            });\n\n            root.addEventListener('popstate', function(e) {\n                // Make sure popstate doesn't run on init -- this is a common issue with Safari and old versions of Chrome\n                if (self.state && self.state.previousState === null) return false;\n\n                self.trigger('navigate');\n            });\n        }\n\n        return this;\n    };\n    /**\n     * Create a RegExp Route from a string\n     * This is the heart of the router and I've made it as small as possible!\n     *\n     * @param {String} Path of route\n     * @param {Array} Array of keys to fill\n     * @param {Bool} Case sensitive comparison\n     * @param {Bool} Strict mode\n     */\n    Grapnel.regexRoute = function(path, keys, sensitive, strict) {\n        if (path instanceof RegExp) return path;\n        if (path instanceof Array) path = '(' + path.join('|') + ')';\n        // Build route RegExp\n        path = path.concat(strict ? '' : '/?')\n            .replace(/\\/\\(/g, '(?:/')\n            .replace(/\\+/g, '__plus__')\n            .replace(/(\\/)?(\\.)?:(\\w+)(?:(\\(.*?\\)))?(\\?)?/g, function(_, slash, format, key, capture, optional) {\n                keys.push({\n                    name: key,\n                    optional: !!optional\n                });\n                slash = slash || '';\n\n                return '' + (optional ? '' : slash) + '(?:' + (optional ? slash : '') + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')' + (optional || '');\n            })\n            .replace(/([\\/.])/g, '\\\\$1')\n            .replace(/__plus__/g, '(.+)')\n            .replace(/\\*/g, '(.*)');\n\n        return new RegExp('^' + path + '$', sensitive ? '' : 'i');\n    };\n    /**\n     * ForEach workaround utility\n     *\n     * @param {Array} to iterate\n     * @param {Function} callback\n     */\n    Grapnel._forEach = function(a, callback) {\n        if (typeof Array.prototype.forEach === 'function') return Array.prototype.forEach.call(a, callback);\n        // Replicate forEach()\n        return function(c, next) {\n            for (var i = 0, n = this.length; i < n; ++i) {\n                c.call(next, this[i], i, this);\n            }\n        }.call(a, callback);\n    };\n    /**\n     * Add an route and handler\n     *\n     * @param {String|RegExp} route name\n     * @return {self} Router\n     */\n    Grapnel.prototype.get = Grapnel.prototype.add = function(route) {\n        var self = this,\n            middleware = Array.prototype.slice.call(arguments, 1, -1),\n            handler = Array.prototype.slice.call(arguments, -1)[0],\n            request = new Request(route);\n\n        var invoke = function RouteHandler() {\n            // Build request parameters\n            var req = request.parse(self.path());\n            // Check if matches are found\n            if (req.match) {\n                // Match found\n                var extra = {\n                    route: route,\n                    params: req.params,\n                    req: req,\n                    regex: req.match\n                };\n                // Create call stack -- add middleware first, then handler\n                var stack = new CallStack(self, extra).enqueue(middleware.concat(handler));\n                // Trigger main event\n                self.trigger('match', stack, req);\n                // Continue?\n                if (!stack.runCallback) return self;\n                // Previous state becomes current state\n                stack.previousState = self.state;\n                // Save new state\n                self.state = stack;\n                // Prevent this handler from being called if parent handler in stack has instructed not to propagate any more events\n                if (stack.parent() && stack.parent().propagateEvent === false) {\n                    stack.propagateEvent = false;\n                    return self;\n                }\n                // Call handler\n                stack.callback();\n            }\n            // Returns self\n            return self;\n        };\n        // Event name\n        var eventName = (self.options.mode !== 'pushState' && self.options.env !== 'server') ? 'hashchange' : 'navigate';\n        // Invoke when route is defined, and once again when app navigates\n        return invoke().on(eventName, invoke);\n    };\n    /**\n     * Fire an event listener\n     *\n     * @param {String} event name\n     * @param {Mixed} [attributes] Parameters that will be applied to event handler\n     * @return {self} Router\n     */\n    Grapnel.prototype.trigger = function(event) {\n        var self = this,\n            params = Array.prototype.slice.call(arguments, 1);\n        // Call matching events\n        if (this.events[event]) {\n            Grapnel._forEach(this.events[event], function(fn) {\n                fn.apply(self, params);\n            });\n        }\n\n        return this;\n    };\n    /**\n     * Add an event listener\n     *\n     * @param {String} event name (multiple events can be called when separated by a space \" \")\n     * @param {Function} callback\n     * @return {self} Router\n     */\n    Grapnel.prototype.on = Grapnel.prototype.bind = function(event, handler) {\n        var self = this,\n            events = event.split(' ');\n\n        Grapnel._forEach(events, function(event) {\n            if (self.events[event]) {\n                self.events[event].push(handler);\n            } else {\n                self.events[event] = [handler];\n            }\n        });\n\n        return this;\n    };\n    /**\n     * Allow event to be called only once\n     *\n     * @param {String} event name(s)\n     * @param {Function} callback\n     * @return {self} Router\n     */\n    Grapnel.prototype.once = function(event, handler) {\n        var ran = false;\n\n        return this.on(event, function() {\n            if (ran) return false;\n            ran = true;\n            handler.apply(this, arguments);\n            handler = null;\n            return true;\n        });\n    };\n    /**\n     * @param {String} Route context (without trailing slash)\n     * @param {[Function]} Middleware (optional)\n     * @return {Function} Adds route to context\n     */\n    Grapnel.prototype.context = function(context) {\n        var self = this,\n            middleware = Array.prototype.slice.call(arguments, 1);\n\n        return function() {\n            var value = arguments[0],\n                submiddleware = (arguments.length > 2) ? Array.prototype.slice.call(arguments, 1, -1) : [],\n                handler = Array.prototype.slice.call(arguments, -1)[0],\n                prefix = (context.slice(-1) !== '/' && value !== '/' && value !== '') ? context + '/' : context,\n                path = (value.substr(0, 1) !== '/') ? value : value.substr(1),\n                pattern = prefix + path;\n\n            return self.add.apply(self, [pattern].concat(middleware).concat(submiddleware).concat([handler]));\n        }\n    };\n    /**\n     * Navigate through history API\n     *\n     * @param {String} Pathname\n     * @return {self} Router\n     */\n    Grapnel.prototype.navigate = function(path) {\n        return this.path(path).trigger('navigate');\n    };\n\n    Grapnel.prototype.path = function(pathname) {\n        var self = this,\n            frag;\n\n        if ('string' === typeof pathname) {\n            // Set path\n            if (self.options.mode === 'pushState') {\n                frag = (self.options.root) ? (self.options.root + pathname) : pathname;\n                root.history.pushState({}, null, frag);\n            } else if (root.location) {\n                root.location.hash = (self.options.hashBang ? '!' : '') + pathname;\n            } else {\n                root._pathname = pathname || '';\n            }\n\n            return this;\n        } else if ('undefined' === typeof pathname) {\n            // Get path\n            if (self.options.mode === 'pushState') {\n                frag = root.location.pathname.replace(self.options.root, '');\n            } else if (self.options.mode !== 'pushState' && root.location) {\n                frag = (root.location.hash) ? root.location.hash.split((self.options.hashBang ? '#!' : '#'))[1] : '';\n            } else {\n                frag = root._pathname || '';\n            }\n\n            return frag;\n        } else if (pathname === false) {\n            // Clear path\n            if (self.options.mode === 'pushState') {\n                root.history.pushState({}, null, self.options.root || '/');\n            } else if (root.location) {\n                root.location.hash = (self.options.hashBang) ? '!' : '';\n            }\n\n            return self;\n        }\n    };\n    /**\n     * Create routes based on an object\n     *\n     * @param {Object} [Options, Routes]\n     * @param {Object Routes}\n     * @return {self} Router\n     */\n    Grapnel.listen = function() {\n        var opts, routes;\n        if (arguments[0] && arguments[1]) {\n            opts = arguments[0];\n            routes = arguments[1];\n        } else {\n            routes = arguments[0];\n        }\n        // Return a new Grapnel instance\n        return (function() {\n            // TODO: Accept multi-level routes\n            for (var key in routes) {\n                this.add.call(this, key, routes[key]);\n            }\n\n            return this;\n        }).call(new Grapnel(opts || {}));\n    };\n    /**\n     * Create a call stack that can be enqueued by handlers and middleware\n     *\n     * @param {Object} Router\n     * @param {Object} Extend\n     * @return {self} CallStack\n     */\n    function CallStack(router, extendObj) {\n        this.stack = CallStack.global.slice(0);\n        this.router = router;\n        this.runCallback = true;\n        this.callbackRan = false;\n        this.propagateEvent = true;\n        this.value = router.path();\n\n        for (var key in extendObj) {\n            this[key] = extendObj[key];\n        }\n\n        return this;\n    };\n    /**\n     * Build request parameters and allow them to be checked against a string (usually the current path)\n     *\n     * @param {String} Route\n     * @return {self} Request \n     */\n    function Request(route) {\n        this.route = route;\n        this.keys = [];\n        this.regex = Grapnel.regexRoute(route, this.keys);\n    };\n    // This allows global middleware\n    CallStack.global = [];\n    /**\n     * Prevent a callback from being called\n     *\n     * @return {self} CallStack \n     */\n    CallStack.prototype.preventDefault = function() {\n        this.runCallback = false;\n    };\n    /**\n     * Prevent any future callbacks from being called\n     *\n     * @return {self} CallStack \n     */\n    CallStack.prototype.stopPropagation = function() {\n        this.propagateEvent = false;\n    };\n    /**\n     * Get parent state\n     *\n     * @return {Object} Previous state \n     */\n    CallStack.prototype.parent = function() {\n        var hasParentEvents = !!(this.previousState && this.previousState.value && this.previousState.value == this.value);\n        return (hasParentEvents) ? this.previousState : false;\n    };\n    /**\n     * Run a callback (calls to next)\n     *\n     * @return {self} CallStack \n     */\n    CallStack.prototype.callback = function() {\n        this.callbackRan = true;\n        this.timeStamp = Date.now();\n        this.next();\n    };\n    /**\n     * Add handler or middleware to the stack\n     *\n     * @param {Function|Array} Handler or a array of handlers\n     * @param {Int} Index to start inserting\n     * @return {self} CallStack \n     */\n    CallStack.prototype.enqueue = function(handler, atIndex) {\n        var handlers = (!Array.isArray(handler)) ? [handler] : ((atIndex < handler.length) ? handler.reverse() : handler);\n\n        while (handlers.length) {\n            this.stack.splice(atIndex || this.stack.length + 1, 0, handlers.shift());\n        }\n\n        return this;\n    };\n    /**\n     * Call to next item in stack -- this adds the `req`, `event`, and `next()` arguments to all middleware\n     *\n     * @return {self} CallStack \n     */\n    CallStack.prototype.next = function() {\n        var self = this;\n\n        return this.stack.shift().call(this.router, this.req, this, function next() {\n            self.next.call(self);\n        });\n    };\n    /**\n     * Match a path string -- returns a request object if there is a match -- returns false otherwise\n     *\n     * @return {Object} req\n     */\n    Request.prototype.parse = function(path) {\n        var match = path.match(this.regex),\n            self = this;\n\n        var req = {\n            params: {},\n            keys: this.keys,\n            matches: (match || []).slice(1),\n            match: match\n        };\n        // Build parameters\n        Grapnel._forEach(req.matches, function(value, i) {\n            var key = (self.keys[i] && self.keys[i].name) ? self.keys[i].name : i;\n            // Parameter key will be its key or the iteration index. This is useful if a wildcard (*) is matched\n            req.params[key] = (value) ? decodeURIComponent(value) : undefined;\n        });\n\n        return req;\n    };\n\n    // Append utility constructors to Grapnel\n    Grapnel.CallStack = CallStack;\n    Grapnel.Request = Request;\n\n    if ('function' === typeof root.define && !root.define.amd.grapnel) {\n        root.define(function(require, exports, module) {\n            root.define.amd.grapnel = true;\n            return Grapnel;\n        });\n    } else if ('object' === typeof module && 'object' === typeof module.exports) {\n        module.exports = exports = Grapnel;\n    } else {\n        root.Grapnel = Grapnel;\n    }\n\n}).call({}, ('object' === typeof window) ? window : this);\n","/home/travis/build/npmtest/node-npmtest-grapnel.js/node_modules/grapnel.js/Gruntfile.js":"\nmodule.exports = function(grunt){\n\n    grunt.initConfig({\n        pkg: grunt.file.readJSON('package.json'),\n        info : {\n            banner : \"/****\\n\"+\n                    \" * Grapnel\\n\"+\n                    \" * https://github.com/baseprime/grapnel\\n\"+\n                    \" *\\n\"+\n                    \" * @author <%= pkg.author %>\\n\"+\n                    \" * @link <%= pkg.link %>\\n\"+\n                    \" * @version <%= pkg.version %>\\n\"+\n                    \" *\\n\"+\n                    \" * Released under MIT License. See LICENSE.txt or http://opensource.org/licenses/MIT\\n\"+\n                    \"*/\\n\\n\"\n        },\n        uglify: {\n            options: {\n                banner: '<%= info.banner %>',\n            },\n            dist: {\n                src: 'src/grapnel.js',\n                dest : 'dist/grapnel.min.js'\n            }\n        },\n        concat : {\n            options : {\n                banner : '<%= info.banner %>'\n            },\n            dist: {\n                src: 'src/grapnel.js',\n                dest : 'src/grapnel.js'\n            }\n        },\n        qunit: {\n            files: ['test/index.html']\n        }\n    });\n\n    grunt.loadNpmTasks('grunt-contrib-concat');\n    grunt.loadNpmTasks('grunt-contrib-uglify');\n    grunt.loadNpmTasks('grunt-contrib-qunit');\n\n    grunt.registerTask('default', ['uglify', 'concat', 'qunit']);\n\n}"}